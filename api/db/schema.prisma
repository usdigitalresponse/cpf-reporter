generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
  previewFeatures = ["metrics", "tracing"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Agency {
  id                Int                @id @default(autoincrement())
  name              String
  abbreviation      String?
  code              String
  organization      Organization?      @relation(fields: [organizationId], references: [id])
  organizationId    Int?
  users             User[]
  uploads           Upload[]
  projects          Project[]
}

model Organization {
  id                Int                 @id @default(autoincrement())
  agencies          Agency[]
  name              String
  subrecipients     Subrecipient[]
  projects          Project[]
  preferences       Json?
}

model User {
  id             Int                 @id @default(autoincrement())
  email          String              @unique
  name           String
  agencyId       Int
  createdAt      DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime            @default(now()) @db.Timestamptz(6) @updatedAt
  role           Role
  isActive       Boolean             @default(true)
  passageId      String?
  agency         Agency              @relation(fields: [agencyId], references: [id])
  uploaded       Upload[]
  initiated      UploadValidation[]

  @@index(fields: [passageId])
}

enum Role {
  USDR_ADMIN
  ORGANIZATION_ADMIN
  ORGANIZATION_STAFF
}

model InputTemplate {
  id                  Int                @id @default(autoincrement())
  name                String
  version             String
  effectiveDate       DateTime           @db.Date
  rulesGeneratedAt    DateTime?          @db.Timestamptz(6)
  createdAt           DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime           @default(now()) @db.Timestamptz(6) @updatedAt
  reportingPeriods    ReportingPeriod[]
}

model OutputTemplate {
  id                 Int               @id @default(autoincrement())
  name               String
  version            String
  effectiveDate      DateTime          @db.Date
  rulesGeneratedAt   DateTime?         @db.Timestamptz(6)
  createdAt          DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime          @default(now()) @db.Timestamptz(6) @updatedAt
  reportingPeriods   ReportingPeriod[]
}

model ReportingPeriod {
  id                Int            @id @default(autoincrement())
  name              String
  startDate         DateTime       @db.Date
  endDate           DateTime       @db.Date
  inputTemplateId   Int
  inputTemplate     InputTemplate  @relation(fields: [inputTemplateId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  outputTemplateId  Int
  outputTemplate    OutputTemplate @relation(fields: [outputTemplateId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  validationRulesId Int?
  validationRules   ValidationRules? @relation(fields: [validationRulesId], references: [id])
  createdAt         DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime       @default(now()) @db.Timestamptz(6) @updatedAt
  uploads           Upload[]
  projects          Project[]
}

model ExpenditureCategory {
  id        Int      @id @default(autoincrement())
  name      String
  code      String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6) @updatedAt
  Uploads   Upload[]
}

model Upload {
  id                    Int                  @id @default(autoincrement())
  filename              String
  uploadedById          Int
  uploadedBy            User                 @relation(fields: [uploadedById], references: [id])
  agencyId              Int
  agency                Agency               @relation(fields: [agencyId], references: [id])
  reportingPeriodId     Int
  reportingPeriod       ReportingPeriod      @relation(fields: [reportingPeriodId], references: [id])
  expenditureCategoryId Int?
  expenditureCategory   ExpenditureCategory? @relation(fields: [expenditureCategoryId], references: [id])
  createdAt             DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime             @default(now()) @db.Timestamptz(6) @updatedAt
  validations           UploadValidation[]
  subrecipientUploads   SubrecipientUpload[]
}

model UploadValidation {
  id                  Int            @id @default(autoincrement())
  uploadId            Int
  upload              Upload         @relation(fields: [uploadId], references: [id], onDelete: Cascade)
  results             Json?         @db.JsonB
  passed              Boolean
  initiatedById       Int
  initiatedBy         User          @relation(fields: [initiatedById], references: [id])
  createdAt           DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime      @default(now()) @db.Timestamptz(6) @updatedAt
  validationRulesId   Int?
  validationRules     ValidationRules? @relation(fields: [validationRulesId], references:[id])
}

model Subrecipient {
  id                  Int                 @id @default(autoincrement())
  name String
  ueiTinCombo         String              @unique
  status              SubrecipientStatus  @default(ACTIVE)
  organizationId      Int
  organization        Organization        @relation(fields: [organizationId], references: [id])
  createdAt           DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime            @default(now()) @db.Timestamptz(6) @updatedAt
  subrecipientUploads SubrecipientUpload[]
}

enum SubrecipientStatus {
  ACTIVE
  ARCHIVED
}

model SubrecipientUpload {
  id                  Int               @id @default(autoincrement())
  subrecipientId      Int                 
  subrecipient        Subrecipient      @relation(fields: [subrecipientId], references: [id])
  uploadId            Int
  upload              Upload            @relation(fields: [uploadId], references: [id])
  rawSubrecipient     Json
  createdAt           DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime          @default(now()) @db.Timestamptz(6) @updatedAt
  version             Version

  @@unique([subrecipientId, uploadId])
}

model Project {
  id                  Int             @id @default(autoincrement())
  code                String
  name                String
  agencyId            Int
  agency              Agency          @relation(fields: [agencyId], references: [id])
  organizationId      Int
  organization        Organization    @relation(fields: [organizationId], references: [id])
  status              String
  description         String
  originationPeriodId Int
  originationPeriod   ReportingPeriod @relation(fields: [originationPeriodId], references: [id])
  createdAt           DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime        @default(now()) @db.Timestamptz(6) @updatedAt
}

enum Version {
  V2023_12_12
  V2024_01_07
  V2024_04_01
  V2024_05_24
}

model ValidationRules {
  id                  Int               @id @default(autoincrement())
  versionId           Version
  createdAt           DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime        @default(now()) @db.Timestamptz(6) @updatedAt
  validations         UploadValidation[]
  reportingPeriods    ReportingPeriod[]
}
