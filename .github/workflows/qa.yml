name: QA Checks

on:
  workflow_call:
    inputs:
      ref:
        type: string
        required: true
    outputs:
      api-test-outcome:
        value: ${{ jobs.test-api.result }}
      api-test-coverage-markdown-report:
        value: ${{ jobs.test-api.outputs.coverage-markdown-report }}
      python-test-outcome:
        value: ${{ jobs.test-python.result }}
      python-test-coverage-markdown-report:
        value: ${{ jobs.test-python.outputs.coverage-markdown-report }}
      web-test-outcome:
        value: ${{ jobs.test-client.result }}
      web-test-coverage-markdown-report:
        value: ${{ jobs.test-client.outputs.coverage-markdown-report }}
      eslint-outcome:
        value: ${{ jobs.eslint.result }}
      ruff-outcome:
        value: ${{ jobs.ruff.result }}
      mypy-outcome:
        value: ${{ jobs.mypy.result }}
      tflint-outcome:
        value: ${{ jobs.tflint.result }}

permissions:
  contents: read

jobs:
  prepare-qa:
    name: Prepare for QA
    runs-on: ubuntu-latest
    steps:
      - uses: step-security/harden-runner@0080882f6c36860b6ba35c610c98ce87d4e2f26f # v2.10.2
        with:
          disable-sudo: true
          egress-policy: audit
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ inputs.ref }}
          show-progress: 'false'
          persist-credentials: 'false'
      - name: Setup Node
        uses: actions/setup-node@0a44ba7841725637a19e28fa30b79a866c81b0a6 # v4.0.4
        with:
          node-version-file: .nvmrc
          cache: yarn
          cache-dependency-path: yarn.lock
      - name: Cache node_modules
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        with:
          key: node_modules-${{ runner.os }}-${{ hashFiles('yarn.lock') }}
          path: node_modules
      - name: Install dependencies
        run: yarn install --immutable
        env:
          CI: 1

  test-api:
    name: Test api-side code
    runs-on: ubuntu-latest
    needs:
      - prepare-qa
    outputs:
      coverage-markdown-report: ${{ steps.coverage-markdown.outputs.markdownReport }}
    services:
      postgres:
        image: "postgres:15"
        env:
          POSTGRES_DB: cpf_reporter_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: step-security/harden-runner@0080882f6c36860b6ba35c610c98ce87d4e2f26f # v2.10.2
        with:
          disable-sudo: true
          egress-policy: audit
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ inputs.ref }}
          show-progress: 'false'
          persist-credentials: 'false'
      - name: Setup Node
        uses: actions/setup-node@0a44ba7841725637a19e28fa30b79a866c81b0a6 # v4.0.4
        with:
          node-version-file: .nvmrc
          cache: yarn
      - name: Restore node_modules
        id: restore-node-modules
        uses: actions/cache/restore@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        with:
          key: node_modules-${{ runner.os }}-${{ hashFiles('yarn.lock') }}
          path: node_modules
          fail-on-cache-miss: true
      - name: Prepare test execution environment
        run: |
          cat >> .env << ENDOFDOTENV
          DATABASE_SECRET_SOURCE=env
          TEST_DATABASE_URL=postgres://postgres:password@localhost:5432/cpf_reporter_test
          ENDOFDOTENV
      - name: Run unit tests with coverage
        run: yarn rw test api --no-watch --collect-coverage
        env:
          CI: 1
      - name: Generate coverage markdown report
        id: coverage-markdown
        uses: fingerprintjs/action-coverage-report-md@b7fcda0d2891d215c6808d32ca249e43f55abe3f # v1.0.6
        with:
          textReportPath: 'coverage/coverage.txt'
          srcBasePath: 'api/src'
      - name: Publish coverage markdown report to step summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'ENDOFREPORT'
          ## API-side test coverage

          <details>
          <summary>Coverage report</summary>

          ${{ env.COVERAGE_REPORT }}

          </details>
          ENDOFREPORT
        env:
          COVERAGE_REPORT: ${{ steps.coverage-markdown.outputs.markdownReport }}

  test-client:
    name: Test client-side code
    runs-on: ubuntu-latest
    needs:
      - prepare-qa
    outputs:
      coverage-markdown-report: ${{ steps.coverage-markdown.outputs.markdownReport }}
    steps:
      - uses: step-security/harden-runner@0080882f6c36860b6ba35c610c98ce87d4e2f26f # v2.10.2
        with:
          disable-sudo: true
          egress-policy: audit
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ inputs.ref }}
          show-progress: 'false'
          persist-credentials: 'false'
      - name: Setup Node
        uses: actions/setup-node@0a44ba7841725637a19e28fa30b79a866c81b0a6 # v4.0.4
        with:
          node-version-file: .nvmrc
          cache: yarn
      - name: Restore node_modules
        id: restore-node-modules
        uses: actions/cache/restore@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        with:
          key: node_modules-${{ runner.os }}-${{ hashFiles('yarn.lock') }}
          path: node_modules
          fail-on-cache-miss: true
      - name: Run unit tests with coverage
        run: yarn rw test web --no-watch --collect-coverage
        env:
          CI: 1
      - name: Generate coverage markdown report
        id: coverage-markdown
        uses: fingerprintjs/action-coverage-report-md@b7fcda0d2891d215c6808d32ca249e43f55abe3f # v1.0.6
        with:
          textReportPath: 'coverage/coverage.txt'
          srcBasePath: 'web/src'
      - name: Publish coverage markdown report to step summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'ENDOFREPORT'
          ## Web-side test coverage

          <details>
          <summary>Coverage report</summary>

          ${{ env.COVERAGE_REPORT }}

          </details>
          ENDOFREPORT
        env:
          COVERAGE_REPORT: ${{ steps.coverage-markdown.outputs.markdownReport }}

  test-python:
    name: Test python code
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: python
    outputs:
      coverage-markdown-report: ${{ steps.coverage-markdown.outputs.stdout }}
    steps:
      - uses: step-security/harden-runner@0080882f6c36860b6ba35c610c98ce87d4e2f26f # v2.10.2
        with:
          disable-sudo: true
          egress-policy: audit
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ inputs.ref }}
          show-progress: 'false'
          persist-credentials: 'false'
      - name: Install poetry
        run: pipx install poetry
      - uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c # v5.0.0
        with:
          python-version-file: 'python/pyproject.toml'
          cache: poetry
      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi
      - name: Run tests
        run: poetry run pytest
      - name: Generate coverage markdown report
        id: coverage-markdown
        run: poetry run coverage report --format markdown
      - name: Publish coverage markdown report to step summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'ENDOFREPORT'
          ## Python test coverage

          <details>
          <summary>Coverage report</summary>

          ${{ env.COVERAGE_REPORT }}

          </details>
          ENDOFREPORT
        env:
          COVERAGE_REPORT: ${{ steps.coverage-markdown.outputs.stdout }}

  eslint:
    name: Lint JavaScript
    runs-on: ubuntu-latest
    needs:
      - prepare-qa
    steps:
      - uses: step-security/harden-runner@0080882f6c36860b6ba35c610c98ce87d4e2f26f # v2.10.2
        with:
          disable-sudo: true
          egress-policy: audit
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ inputs.ref }}
          show-progress: 'false'
          persist-credentials: 'false'
      - name: Setup Node
        uses: actions/setup-node@0a44ba7841725637a19e28fa30b79a866c81b0a6 # v4.0.4
        with:
          node-version-file: .nvmrc
          cache: yarn
      - name: Restore node_modules
        id: restore-node-modules
        uses: actions/cache/restore@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        with:
          key: node_modules-${{ runner.os }}-${{ hashFiles('yarn.lock') }}
          path: node_modules
          fail-on-cache-miss: true
      - name: Run linter for api side
        run: yarn eslint api/src
      - name: Run linter for web side
        if: ${{ !cancelled() }}
        run: yarn eslint web/src
      - name: Run linter for scripts
        if: ${{ !cancelled() }}
        run: yarn eslint scripts

  ruff:
    name: Lint python
    runs-on: ubuntu-latest
    steps:
      - uses: step-security/harden-runner@0080882f6c36860b6ba35c610c98ce87d4e2f26f # v2.10.2
        with:
          disable-sudo: true
          egress-policy: audit
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ inputs.ref }}
          show-progress: 'false'
          persist-credentials: 'false'
      - uses: chartboost/ruff-action@e18ae971ccee1b2d7bbef113930f00c670b78da4 # v1
        with:
          src: python

  mypy:
    name: Type-check python
    runs-on: ubuntu-latest
    steps:
      - uses: step-security/harden-runner@0080882f6c36860b6ba35c610c98ce87d4e2f26f # v2.10.2
        with:
          disable-sudo: true
          egress-policy: audit
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ inputs.ref }}
          show-progress: 'false'
          persist-credentials: 'false'
      - name: Install poetry
        run: pipx install poetry
      - uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
        with:
          python-version-file: 'python/pyproject.toml'
          cache: poetry
      - name: Get Python changed files
        id: changed-py-files
        uses: tj-actions/changed-files@4edd678ac3f81e2dc578756871e4d00c19191daf # v45.0.4
        with:
          files: |
            *.py
            **/*.py
      - name: Run if any of the listed files above is changed
        if: steps.changed-py-files.outputs.any_changed == 'true'
        env:
          CHANGED_PY_FILES: ${{ steps.changed-py-files.outputs.all_changed_files }}
        run: |
          poetry install --no-interaction --no-ansi
          poetry run mypy $CHANGED_PY_FILES --ignore-missing-imports

  tflint:
    name: Lint terraform
    runs-on: ubuntu-latest
    steps:
      - uses: step-security/harden-runner@0080882f6c36860b6ba35c610c98ce87d4e2f26f # v2.10.2
        with:
          disable-sudo: true
          egress-policy: audit
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ inputs.ref }}
          show-progress: 'false'
          persist-credentials: 'false'
      - uses: actions/cache@704facf57e6136b1bc63b828d79edcd491f0ee84 # v3.3.2
        name: Cache plugin dir
        with:
          path: ~/.tflint.d/plugins
          key: ${{ runner.os }}-tflint-${{ hashFiles('terraform/.tflint.hcl') }}
      - uses: terraform-linters/setup-tflint@19a52fbac37dacb22a09518e4ef6ee234f2d4987 # v4.0.0
        name: Setup TFLint
        with:
          tflint_version: latest
          tflint_wrapper: true
      - name: Show TFLint version
        run: tflint --version
      - name: Init TFLint
        run: tflint --init
        working-directory: terraform
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Run TFLint
        working-directory: terraform
        run: tflint --format compact --recursive --minimum-failure-severity=error
