name: Build

permissions:
  contents: read
  packages: write

on:
  workflow_call:
    inputs:
      ref:
        type: string
        required: true
      build-api-image:
        description: Whether to build a `api_serve` Docker image.
        type: boolean
        default: true
      build-api-functions:
        description: Whether to build zip artifacts for API functions.
        type: boolean
        default: true
      build-console-image:
        description: Whether to build a RedwoodJS console Docker image.
        type: boolean
        default: true
      build-python-functions:
        description: Whether to build zip artifacts for Python functions.
        type: boolean
        default: true
      build-web:
        description: Whether to build website distribution artifacts for the client package.
        type: boolean
        default: true
      api-image-name:
        description: Name of the docker image. Use caution when setting a non-default value.
        type: string
        default: ${{ github.repository }}-api
      api-function-artifact-retention-days:
        description: Number of days to retain API function build artifacts.
        type: number
        default: 90
      console-image-name:
        description: Name of the docker image. Use caution when setting a non-default value.
        type: string
        default: ${{ github.repository }}-console
      docker-image-args-ref:
        description: Ref name for the build commit, like refs/heads/my-feature-branch-1.
        type: string
        required: true
      docker-image-artifacts-retention-days:
        description: Number of days to store Docker attestation artifacts.
        type: number
        default: 90
      docker-image-upload-attestations:
        description: Whether to upload attestation files for Docker builds as artifacts.
        type: boolean
        default: false
      docker-image-push:
        description: Whether to push Docker images to the registry after building.
        type: boolean
        default: true
      docker-image-registry:
        description: The Docker image registry. Use caution when setting a non-default value.
        type: string
        default: ghcr.io
      docker-image-tag-latest:
        description: Tags image builds with `latest`.
        type: boolean
        default: false
      docker-image-tag-production:
        description: Tags image builds with `production`.
        type: boolean
        required: false
      docker-image-tag-pr:
        description: A PR number to add as a Docker image tag (as `pr-<value>`) when building for a pull request.
        type: string
        required: false
      docker-image-tag-release:
        description: A tag value that, if provided, signifies the release version associated with the Docker image.
        type: string
        required: false
      docker-image-version:
        description: Value to set for the `org.opencontainers.image.version label`.
        type: string
        default: ""
      python-function-artifact-retention-days:
        description: Number of days to retain Python function build artifacts.
        type: number
        default: 90
      web-artifact-retention-days:
        description: Number of days to retain website build artifacts.
        type: number
        default: 90
      web-dotenv:
        description: Contents to write to .env before building website artifacts.
        type: string
        default: ""
    outputs:
      build-api-image-result:
        value: ${{ jobs.api-docker-image.result }}
      build-api-functions-result:
        value: ${{ jobs.api-function-zips.result }}
      build-console-image-result:
        value: ${{ jobs.redwood-console-image.result }}
      build-python-functions-result:
        value: ${{ jobs.python-function-zips.result }}
      build-web-result:
        value: ${{ jobs.web-bundle.result }}
      api-image-digest:
        value: ${{ jobs.api-docker-image.outputs.digest }}
      api-image-full-name:
        value: ${{ jobs.api-docker-image.outputs.full-name }}
      api-attestation-artifacts-key:
        value: ${{ jobs.api-docker-image.outputs.attestation-artifacts-key }}
      api-attestation-artifacts-path:
        value: ${{ jobs.api-docker-image.outputs.attestation-artifacts-path }}
      api-functions-artifacts-key:
        value: ${{ jobs.api-function-zips.outputs.artifacts-key }}
      api-functions-artifacts-path:
        value: ${{ jobs.api-function-zips.outputs.artifacts-path }}
      api-functions-checksums-sha256:
        value: ${{ jobs.api-function-zips.outputs.checksums-sha256 }}
      console-image-digest:
        value: ${{ jobs.redwood-console-image.outputs.digest }}
      console-image-full-name:
        value: ${{ jobs.redwood-console-image.outputs.full-name }}
      console-attestation-artifacts-key:
        value: ${{ jobs.redwood-console-image.outputs.attestation-artifacts-key }}
      console-attestation-artifacts-path:
        value: ${{ jobs.redwood-console-image.outputs.attestation-artifacts-path }}
      python-functions-artifacts-key:
        value: ${{ jobs.python-function-zips.outputs.artifacts-key }}
      python-functions-artifacts-path:
        value: ${{ jobs.python-function-zips.outputs.artifacts-path }}
      python-functions-checksums-sha256:
        value: ${{ jobs.python-function-zips.outputs.checksums-sha256 }}
      web-artifacts-key:
        value: ${{ jobs.web-bundle.outputs.artifacts-key }}
      web-artifacts-path:
        value: ${{ jobs.web-bundle.outputs.artifacts-path }}
      web-checksums-sha256:
        value: ${{ jobs.web-bundle.outputs.checksums-sha256 }}

jobs:
  api-docker-image:
    name: Build API Docker image
    if: inputs.build-api-image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      ATTESTATION_ARTIFACTS_KEY: "api-image-attestations-${{ inputs.ref }}"
    outputs:
      commit-tag: ${{ inputs.ref }}
      digest: ${{ steps.build-push.outputs.digest }}
      full-name: ${{ inputs.docker-image-registry }}/${{ inputs.api-image-name }}@${{ steps.build-push.outputs.digest }}
      attestation-artifacts-key: ${{ env.ATTESTATION_ARTIFACTS_KEY }}
      attestation-artifacts-path: ${{ steps.store-attestations.outputs.path }}
    steps:
      - uses: step-security/harden-runner@1b05615854632b887b69ae1be8cbefe72d3ae423 # v2.6.0
        with:
          disable-sudo: true
          egress-policy: audit
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        id: checkout
        with:
          ref: ${{ inputs.ref }}
          show-progress: 'false'
          persist-credentials: 'false'
      - name: Set build info for the checked-out commit
        id: commit-sha
        run: echo "long=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
      - name: Set up QEMU
        uses: docker/setup-qemu-action@68827325e0b33c7199eb31dd4e31fbe9023e06e3 # v3.0.0
        with:
          platforms: linux/amd64,linux/arm64
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0
        with:
          platforms: linux/amd64,linux/arm64
      - name: Authenticate docker
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ inputs.docker-image-registry }}/${{ inputs.api-image-name }}
          tags: |
            type=raw,enable=true,priority=100,prefix=sha-,value=${{ steps.commit-sha.outputs.long }}
            type=raw,enable=${{ inputs.docker-image-tag-release != '' }},priority=200,value=${{ inputs.docker-image-tag-release }}
            type=raw,enable=${{ inputs.docker-image-tag-latest }},priority=300,value=latest
            type=raw,enable=${{ inputs.docker-image-tag-pr != '' }},priority=600,prefix=pr-,value=${{ inputs.docker-image-tag-pr }}
          labels: |
            org.opencontainers.image.title=${{ inputs.api-image-name }}
            org.opencontainers.image.version=${{ inputs.docker-image-version }}
            org.opencontainers.image.revision=${{ steps.commit-sha.outputs.long }}
            com.datadoghq.tags.service=cpf-reporter
            com.datadoghq.tags.version=${{ steps.commit-sha.outputs.long }}
      - name: Set bake file definition as step output
        id: bakefile
        run: |
          BAKEFILE_CONTENTS="$(cat $BAKEFILE_PATH)"
          echo "result<<ENDOFBAKEFILE" >> $GITHUB_OUTPUT
          echo "$BAKEFILE_CONTENTS" >> $GITHUB_OUTPUT
          echo "ENDOFBAKEFILE" >> $GITHUB_OUTPUT
        env:
          BAKEFILE_PATH: ${{ steps.meta.outputs.bake-file }}
      - name: Build and push Docker image
        id: build-push
        uses: docker/build-push-action@4a13e500e55cf31b7a5d59a38ab2040ab0f42f56 # v5.1.0
        with:
          context: .
          github-token: ${{ secrets.GITHUB_TOKEN }}
          push: ${{ inputs.docker-image-push }}
          file: Dockerfile
          target: api_serve
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          pull: true
          provenance: true
          sbom: true
          build-args: |
            GIT_COMMIT=${{ inputs.ref }}
            GIT_REF=${{ inputs.docker-image-args-ref }}
            TIMESTAMP=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
      - name: Publish build results
        run: |
          REPORT_FILE=$(mktemp -t summary.md.XXXXX)
          cat >> $REPORT_FILE << 'ENDOFREPORT'
          ## Docker Build Summary

          **Image ID:** `${{ steps.build-push.outputs.imageid }}`
          **Image Digest:** `${{ steps.build-push.outputs.digest }}`

          <details>
          <summary>Bake File</summary>

          ```json
          ${{ steps.bakefile.outputs.result }}
          ```

          </details>
          <details>
          <summary>Build Metadata</summary>

          ```json
          ${{ steps.build-push.outputs.metadata }}
          ```

          </details>
          ENDOFREPORT
          cat "$REPORT_FILE" >> $GITHUB_STEP_SUMMARY
      - name: Store attestations
        id: store-attestations
        if: inputs.docker-image-upload-attestations
        run: |
          ATTESTATIONS_DIR=$(mktemp -d)
          echo "path=$ATTESTATIONS_DIR" >> $GITHUB_OUTPUT
          docker buildx imagetools inspect "$INSPECT_NAME" --format "{{ json .SBOM }}" > $ATTESTATIONS_DIR/sbom.sdpx.json
          docker buildx imagetools inspect "$INSPECT_NAME" --format "{{ json .Provenance }}" > $ATTESTATIONS_DIR/provenance.json
        env:
          INSPECT_NAME: ${{ inputs.docker-image-registry }}/${{ inputs.api-image-name }}@${{ steps.build-push.outputs.digest }}
      - name: Upload attestations
        if: steps.store-attestations.outcome == 'success'
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
        with:
          name: ${{ env.ATTESTATION_ARTIFACTS_KEY }}
          path: ${{ steps.store-attestations.outputs.path }}
          if-no-files-found: error
          retention-days: ${{ inputs.docker-image-artifacts-retention-days }}

  redwood-console-image:
    name: Build RedwoodJS console Docker image
    if: inputs.build-console-image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      ATTESTATION_ARTIFACTS_KEY: "console-image-attestations-${{ inputs.ref }}"
    outputs:
      commit-tag: ${{ inputs.ref }}
      digest: ${{ steps.build-push.outputs.digest }}
      full-name: ${{ inputs.docker-image-registry }}/${{ inputs.console-image-name }}@${{ steps.build-push.outputs.digest }}
      attestation-artifacts-key: ${{ env.ATTESTATION_ARTIFACTS_KEY }}
      attestation-artifacts-path: ${{ steps.store-attestations.outputs.path }}
    steps:
      - uses: step-security/harden-runner@1b05615854632b887b69ae1be8cbefe72d3ae423 # v2.6.0
        with:
          disable-sudo: true
          egress-policy: audit
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        id: checkout
        with:
          ref: ${{ inputs.ref }}
          show-progress: 'false'
          persist-credentials: 'false'
      - name: Set build info for the checked-out commit
        id: commit-sha
        run: echo "long=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
      - name: Set up QEMU
        uses: docker/setup-qemu-action@68827325e0b33c7199eb31dd4e31fbe9023e06e3 # v3.0.0
        with:
          platforms: linux/amd64,linux/arm64
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0
        with:
          platforms: linux/amd64,linux/arm64
      - name: Authenticate docker
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ inputs.docker-image-registry }}/${{ inputs.console-image-name }}
          tags: |
            type=raw,enable=true,priority=100,prefix=sha-,value=${{ steps.commit-sha.outputs.long }}
            type=raw,enable=${{ inputs.docker-image-tag-release != '' }},priority=200,value=${{ inputs.docker-image-tag-release }}
            type=raw,enable=${{ inputs.docker-image-tag-latest }},priority=300,value=latest
            type=raw,enable=${{ inputs.docker-image-tag-pr != '' }},priority=600,prefix=pr-,value=${{ inputs.docker-image-tag-pr }}
          labels: |
            org.opencontainers.image.title=${{ inputs.console-image-name }}
            org.opencontainers.image.version=${{ inputs.docker-image-version }}
            org.opencontainers.image.revision=${{ steps.commit-sha.outputs.long }}
      - name: Set bake file definition as step output
        id: bakefile
        run: |
          BAKEFILE_CONTENTS="$(cat $BAKEFILE_PATH)"
          echo "result<<ENDOFBAKEFILE" >> $GITHUB_OUTPUT
          echo "$BAKEFILE_CONTENTS" >> $GITHUB_OUTPUT
          echo "ENDOFBAKEFILE" >> $GITHUB_OUTPUT
        env:
          BAKEFILE_PATH: ${{ steps.meta.outputs.bake-file }}
      - name: Build and push Docker image
        id: build-push
        uses: docker/build-push-action@4a13e500e55cf31b7a5d59a38ab2040ab0f42f56 # v5.1.0
        with:
          context: .
          github-token: ${{ secrets.GITHUB_TOKEN }}
          push: ${{ inputs.docker-image-push }}
          file: Dockerfile
          target: console
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          pull: true
          provenance: true
          sbom: true
          build-args: |
            GIT_COMMIT=${{ inputs.ref }}
            GIT_REF=${{ inputs.docker-image-args-ref }}
            TIMESTAMP=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
      - name: Publish build results
        run: |
          REPORT_FILE=$(mktemp -t summary.md.XXXXX)
          cat >> $REPORT_FILE << 'ENDOFREPORT'
          ## Docker Build Summary

          **Image ID:** `${{ steps.build-push.outputs.imageid }}`
          **Image Digest:** `${{ steps.build-push.outputs.digest }}`

          <details>
          <summary>Bake File</summary>

          ```json
          ${{ steps.bakefile.outputs.result }}
          ```

          </details>
          <details>
          <summary>Build Metadata</summary>

          ```json
          ${{ steps.build-push.outputs.metadata }}
          ```

          </details>
          ENDOFREPORT
          cat "$REPORT_FILE" >> $GITHUB_STEP_SUMMARY
      - name: Store attestations
        id: store-attestations
        if: inputs.docker-image-upload-attestations
        run: |
          ATTESTATIONS_DIR=$(mktemp -d)
          echo "path=$ATTESTATIONS_DIR" >> $GITHUB_OUTPUT
          docker buildx imagetools inspect "$INSPECT_NAME" --format "{{ json .SBOM }}" > $ATTESTATIONS_DIR/sbom.sdpx.json
          docker buildx imagetools inspect "$INSPECT_NAME" --format "{{ json .Provenance }}" > $ATTESTATIONS_DIR/provenance.json
        env:
          INSPECT_NAME: ${{ inputs.docker-image-registry }}/${{ inputs.console-image-name }}@${{ steps.build-push.outputs.digest }}
      - name: Upload attestations
        if: steps.store-attestations.outcome == 'success'
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
        with:
          name: ${{ env.ATTESTATION_ARTIFACTS_KEY }}
          path: ${{ steps.store-attestations.outputs.path }}
          if-no-files-found: error
          retention-days: ${{ inputs.docker-image-artifacts-retention-days }}

  api-function-zips:
    name: Build API Lambda function zip artifacts
    if: inputs.build-api-functions
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: none
    env:
      ARTIFACTS_KEY: api-${{ inputs.ref }}
      BUILD_OUTPUT_PATH: ${{ github.workspace }}/api/dist
      ARTIFACTS_PATH: ${{ github.workspace }}/api/dist/zipballs
    outputs:
      artifacts-key: ${{ env.ARTIFACTS_KEY }}
      artifacts-path: ${{ env.ARTIFACTS_PATH }}
      checksums-sha256: ${{ steps.checksums.outputs.sha256 }}
    steps:
      - uses: step-security/harden-runner@1b05615854632b887b69ae1be8cbefe72d3ae423 # v2.6.0
        with:
          disable-sudo: true
          egress-policy: audit
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ inputs.ref }}
          show-progress: 'false'
          persist-credentials: 'false'
      - name: Setup Node
        uses: actions/setup-node@8f152de45cc393bb48ce5d89d36b731f54556e65 # v4.0.0
        with:
          node-version-file: .nvmrc
          cache: yarn
      - name: Install dependencies
        run: yarn install
      - name: Build the api side
        run: yarn rw build api
        env:
          CI: 1
      - name: Zip the built functions
        run: yarn zip-it-and-ship-it $BUILD_OUTPUT_PATH/functions $ARTIFACTS_PATH
      - name: Add RDS CA bundle to zipped Lambda artifacts
        run: |
          for $zipfile in $ARTIFACTS_PATH/*.zip; do
            zip -ju $zipfile api/db/rds-global-bundle.pem
          done;
      - name: Compute build artifact checksums
        id: checksums
        run: |
          DIST_CHECKSUMS=$(find "$BUILD_OUTPUT_PATH" -type f -exec sha256sum {} \;)
          echo "sha256<<EOF" >> $GITHUB_OUTPUT
          echo "$DIST_CHECKSUMS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: Publish build results
        run: |
          REPORT_FILE=$(mktemp -t summary.md.XXXXX)
          cat >> $REPORT_FILE << 'ENDOFREPORT'
          ## Build JS API Functions Summary

          <details>
          <summary>Checksums</summary>

          ```
          ${{ steps.checksums.outputs.sha256 }}
          ```

          </details>
          ENDOFREPORT
          cat "$REPORT_FILE" >> $GITHUB_STEP_SUMMARY
      - name: Upload build artifact
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
        with:
          name: ${{ env.ARTIFACTS_KEY }}
          path: ${{ env.ARTIFACTS_PATH }}
          if-no-files-found: error
          retention-days: ${{ inputs.api-function-artifact-retention-days }}

  python-function-zips:
    name: Build Python Lambda function zip artifacts
    if: inputs.build-python-functions
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: none
    env:
      ARTIFACTS_KEY: python-${{ inputs.ref }}
      ARTIFACTS_PATH: ${{ github.workspace }}/python/dist/zipballs
    outputs:
      artifacts-key: ${{ env.ARTIFACTS_KEY }}
      artifacts-path: ${{ env.ARTIFACTS_PATH }}
      checksums-sha256: ${{ steps.checksums.outcome.sha256 }}
    steps:
      - uses: step-security/harden-runner@1b05615854632b887b69ae1be8cbefe72d3ae423 # v2.6.0
        with:
          disable-sudo: true
          egress-policy: audit
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ inputs.ref }}
          show-progress: 'false'
          persist-credentials: 'false'
      - name: Install Poetry
        run: pipx install poetry
      - name: Setup Python
        uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c # v5.0.0
        with:
          python-version-file: 'python/pyproject.toml'
          cache: poetry
      - name: Install dependencies
        working-directory: python
        run: |
          poetry install --only main --sync --no-interaction --no-ansi
          echo "INSTALLED_PACKAGE_DIR=$(poetry env info --path --no-interaction --no-ansi)/lib/python3.12/site-packages" >> $GITHUB_ENV
        env:
          POETRY_VIRTUALENVS_OPTIONS_ALWAYS_COPY: "true"
          POETRY_VIRTUALENVS_OPTIONS_NO_PIP: "true"
          POETRY_VIRTUALENVS_OPTIONS_NO_SETUPTOOLS: "true"
      - name: Clean Python bytecode
        run: find python/src $INSTALLED_PACKAGE_DIR | grep -E "(/__pycache__$|\.pyc$|\.pyo$)" | xargs rm -rf
      - name: Create build artifact directory
        run: mkdir -p $ARTIFACTS_PATH
      - name: Zip third-party packages
        run: |
          pushd $INSTALLED_PACKAGE_DIR
          zip -r $ARTIFACTS_PATH/lambda.zip .
          popd
      - name: Zip Python source code in repo
        run: |
          pushd python
          zip -r $ARTIFACTS_PATH/lambda.zip src
          popd
      - name: Compute build artifact checksums
        id: checksums
        run: |
          DIST_CHECKSUMS=$(find "$ARTIFACTS_PATH" -type f -exec sha256sum {} \;)
          echo "sha256<<EOF" >> $GITHUB_OUTPUT
          echo "$DIST_CHECKSUMS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: Publish build results
        run: |
          REPORT_FILE=$(mktemp -t summary.md.XXXXX)
          cat >> $REPORT_FILE << 'ENDOFREPORT'
          ## Build Python API Functions Summary

          <details>
          <summary>Checksums</summary>

          ```
          ${{ steps.checksums.outputs.sha256 }}
          ```

          </details>
          ENDOFREPORT
          cat "$REPORT_FILE" >> $GITHUB_STEP_SUMMARY
      - name: Upload build artifact
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
        with:
          name: ${{ env.ARTIFACTS_KEY }}
          path: ${{ env.ARTIFACTS_PATH }}
          if-no-files-found: error
          retention-days: ${{ inputs.python-function-artifact-retention-days }}

  web-bundle:
    name: Build website deployment artifact
    if: inputs.build-web
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: none
    env:
      ARTIFACTS_KEY: web-${{ inputs.ref }}
      ARTIFACTS_PATH: ${{ github.workspace }}/web/dist
    outputs:
      artifacts-key: ${{ env.ARTIFACTS_KEY }}
      artifacts-path: ${{ env.ARTIFACTS_PATH }}
      checksums-sha256: ${{ steps.checksums.outputs.sha256 }}
    steps:
      - uses: step-security/harden-runner@1b05615854632b887b69ae1be8cbefe72d3ae423 # v2.6.0
        with:
          disable-sudo: true
          egress-policy: audit
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ inputs.ref }}
          show-progress: 'false'
          persist-credentials: 'false'
      - name: Setup Node
        uses: actions/setup-node@8f152de45cc393bb48ce5d89d36b731f54556e65 # v4.0.0
        with:
          node-version-file: .nvmrc
          cache: yarn
          cache-dependency-path: yarn.lock
      - name: Install dependencies
        run: yarn install
      - name: Write env vars for build
        run: cat <<< "$DOTENV_FOR_BUILD" >> .env
        env:
          DOTENV_FOR_BUILD: ${{ inputs.web-dotenv }}
      - name: Build the website
        run: yarn rw build web
        env:
          CI: 1
      - name: Compute build artifact checksums
        id: checksums
        run: |
          DIST_CHECKSUMS=$(find "$ARTIFACTS_PATH" -type f -exec sha256sum {} \;)
          echo "sha256<<EOF" >> $GITHUB_OUTPUT
          echo "$DIST_CHECKSUMS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: Publish build results
        run: |
          REPORT_FILE=$(mktemp -t summary.md.XXXXX)
          cat >> $REPORT_FILE << 'ENDOFREPORT'
          ## Build Website Summary

          <details>
          <summary>Checksums</summary>

          ```
          ${{ steps.checksums.outputs.sha256 }}
          ```

          </details>
          ENDOFREPORT
          cat "$REPORT_FILE" >> $GITHUB_STEP_SUMMARY
      - name: Upload build artifact
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
        with:
          name: ${{ env.ARTIFACTS_KEY }}
          path: ${{ env.ARTIFACTS_PATH }}
          if-no-files-found: error
          retention-days: ${{ inputs.web-artifact-retention-days }}
