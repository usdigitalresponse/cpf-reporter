name: Publish QA Results

on:
  workflow_call:
    inputs:
      api-test-outcome:
        type: string
        required: true
      api-test-coverage-markdown-report:
        type: string
        required: true
      python-test-outcome:
        type: string
        required: true
      python-test-coverage-markdown-report:
        type: string
        required: true
      web-test-outcome:
        type: string
        required: true
      web-test-coverage-markdown-report:
        type: string
        required: true
      eslint-outcome:
        type: string
        required: true
      ruff-outcome:
        type: string
        required: true
      tflint-outcome:
        type: string
        required: true
      pr-number:
        type: string
        required: true
      write-summary:
        type: boolean
        default: true
      write-comment:
        type: boolean
        default: false

permissions:
  contents: read
  pull-requests: write

jobs:
  publish:
    name: Publish QA Results
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: step-security/harden-runner@1b05615854632b887b69ae1be8cbefe72d3ae423 # v2.6.0
        with:
          disable-sudo: true
          egress-policy: audit
      - name: Write the report markdown file
        run: |
          REPORT_FILE=$(mktemp -t summary.md.XXXXX)
          echo "REPORT_FILE=$REPORT_FILE" >> $GITHUB_ENV
          cat >> $REPORT_FILE << 'ENDOFREPORT'
          ## QA Summary

          _[See our documentation for tips on how to resolve failing QA checks.](${{ env.GH_SERVER}}/${{ env.GH_REPO }}/blob/main/docs/resolving-qa-failures.md)_

          | QA Check        | Result  |
          |:----------------|:-------:|
          | 🌐 Web Tests | ${{ (env.WEB_TEST_OUTCOME == 'success' && '✅') || (env.WEB_TEST_OUTCOME == 'skipped' && '➖') || '❌' }} |
          | 🔗 API Tests | ${{ (env.API_TEST_OUTCOME == 'success' && '✅') || (env.API_TEST_OUTCOME == 'skipped' && '➖') || '❌' }} |
          | 🐍 Python Tests | ${{ (env.PYTHON_TEST_OUTCOME == 'success' && '✅') || (env.PYTHON_TEST_OUTCOME == 'skipped' && '➖') || '❌' }} |
          | 📏 ESLint    | ${{ (env.ESLINT_OUTCOME == 'success' && '✅') || (env.ESLINT_OUTCOME == 'skipped' && '➖') || '❌' }} |
          | 🧼 Ruff      | ${{ (env.RUFF_OUTCOME == 'success' && '✅')  || (env.RUFF_OUTCOME == 'skipped' && '➖') || '❌' }} |
          | 🧹 TFLint    | ${{ (env.TFLINT_OUTCOME == 'success' && '✅') || (env.TFLINT_OUTCOME == 'skipped' && '➖') || '❌' }} |

          ### Test Coverage

          <details>
          <summary>Coverage report for <code>api</code> suite</summary>

          ${{ env.API_COVERAGE_REPORT }}

          </details>
          <details>
          <summary>Coverage report for <code>web</code> suite</summary>

          ${{ env.WEB_COVERAGE_REPORT }}

          </details>

          <details>
          <summary>Coverage report for <code>python</code> suite</summary>

          ${{ env.PYTHON_COVERAGE_REPORT }}

          </details>

          *Pusher: @${{ env.GH_ACTOR }}, Action: `${{ env.GH_ACTION }}`, Workflow: [`${{ env.GH_WORKFLOW }}`](${{ env.GH_SERVER}}/${{ env.GH_REPO }}/actions/runs/${{ env.GH_RUN_ID }})*
          ENDOFREPORT
        env:
          API_TEST_OUTCOME: ${{ inputs.api-test-outcome }}
          API_COVERAGE_REPORT: ${{ inputs.api-test-coverage-markdown-report }}
          WEB_TEST_OUTCOME: ${{ inputs.web-test-outcome }}
          WEB_COVERAGE_REPORT: ${{ inputs.web-test-coverage-markdown-report }}
          PYTHON_TEST_OUTCOME: ${{ inputs.python-test-outcome }}
          PYTHON_COVERAGE_REPORT: ${{ inputs.python-test-coverage-markdown-report }}
          ESLINT_OUTCOME: ${{ inputs.eslint-outcome }}
          RUFF_OUTCOME: ${{ inputs.ruff-outcome }}
          TFLINT_OUTCOME: ${{ inputs.tflint-outcome }}
          GH_ACTOR: ${{ github.actor }}
          GH_ACTION: ${{ github.event_name }}
          GH_WORKFLOW: ${{ github.workflow }}
          GH_SERVER: ${{ github.server_url }}
          GH_REPO: ${{ github.repository }}
          GH_RUN_ID: ${{ github.run_id }}
      - name: Write the step summary
        if: inputs.write-summary
        run: cat $REPORT_FILE | head -c 65500 >> $GITHUB_STEP_SUMMARY # Observe GitHub's 65535 character limit
      - name: Write the comment body
        id: comment-body
        run: |
          CONTENT=$(cat $REPORT_FILE)
          echo "REPORT_CONTENT<<ENDOFREPORT" >> $GITHUB_OUTPUT
          echo "$CONTENT" >> $GITHUB_OUTPUT
          echo "ENDOFREPORT" >> $GITHUB_OUTPUT
      - name: Find previous report comment
        id: find-comment
        if: inputs.write-comment
        uses: peter-evans/find-comment@a54c31d7fa095754bfef525c0c8e5e5674c4b4b1 # v2.4.0
        with:
          issue-number: ${{ inputs.pr-number }}
          comment-author: 'github-actions[bot]'
          body-includes: QA Summary
      - name: Create or update comment
        if: inputs.write-comment
        uses: peter-evans/create-or-update-comment@23ff15729ef2fc348714a3bb66d2f655ca9066f2 # v3.1.0
        with:
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: ${{ steps.comment-body.outputs.REPORT_CONTENT }}
          edit-mode: replace
